load("//bazel:api.bzl", "modular_py_binary", "modular_py_library", "pkg_files", "requirement", "strip_prefix")

modular_py_library(
    name = "benchmark_serving_lib",
    srcs = glob(
        ["*.py"],
        exclude = [
            "serve_replay.py",
            "benchmark_throughput.py",
        ],
    ),
    data = [
        ":benchmark_config_yaml_files",
    ],
    imports = ["../.."],
    visibility = ["//visibility:public"],
    deps = [
        "//SDK/lib/API/python/max/benchmark/benchmark_shared",
        "//SDK/lib/API/python/max/diagnostics",
        requirement("aiohttp"),
        requirement("datasets"),
        requirement("huggingface-hub"),
        requirement("jinja2"),
        requirement("msgspec"),
        requirement("numpy"),
        requirement("pillow"),
        requirement("psutil"),
        requirement("pyyaml"),
        requirement("tqdm"),
        requirement("transformers"),
    ],
)

modular_py_binary(
    name = "benchmark_serving",
    srcs = ["benchmark_serving.py"],
    imports = ["../.."],
    visibility = ["//visibility:public"],
    deps = [
        "//SDK/lib/API/python/max/benchmark/benchmark_shared",
        "//SDK/lib/API/python/max/diagnostics",
        requirement("aiohttp"),
        requirement("datasets"),
        requirement("huggingface-hub"),
        requirement("numpy"),
        requirement("jinja2"),
        requirement("tqdm"),
        requirement("transformers"),
    ],
)

modular_py_binary(
    name = "benchmark_throughput",
    srcs = ["benchmark_throughput.py"],
    data = [
        ":yaml_files",
        # TODO: Why do we need these?
        "//KGEN/tools/mojo",
        "//SDK:max",
    ],
    imports = ["../.."],
    visibility = ["//visibility:public"],
    deps = [
        "//SDK/lib/API/python/max/benchmark/benchmark_shared",
        "//SDK/lib/API/python/max/engine",
        "//SDK/lib/API/python/max/entrypoints:pipelines",
        "//SDK/lib/API/python/max/pipelines/architectures",
        "//SDK/lib/API/python/max/serve",
        requirement("click"),
        requirement("msgspec"),
        requirement("pyarrow"),
        requirement("pyyaml"),
        requirement("transformers"),
    ],
)

modular_py_binary(
    name = "serve_replay",
    srcs = ["serve_replay.py"],
    visibility = [":__subpackages__"],
    deps = [
        "//SDK/lib/API/python/max/entrypoints:pipelines",
        "//SDK/lib/API/python/max/entrypoints:replay_recording",
        requirement("click"),
        requirement("httpx"),
    ],
)

# TODO: This is maybe redundant since we already have yaml_files?
pkg_files(
    name = "benchmark_config_yaml_files",
    srcs = glob(["configs/*.yaml"]),
    visibility = ["//visibility:public"],
)

pkg_files(
    name = "python_files",
    srcs = glob(["**/*.py"]) + ["//SDK/lib/API/python/max/benchmark/benchmark_shared:python_files"],
    prefix = "benchmark",
    strip_prefix = strip_prefix.from_pkg(""),
    # Symlink shenanigans.
    # This is used in open-source, but not used in SDK, so the linter gets confused.
    tags = ["maybe-unused"],
    visibility = ["//visibility:public"],
)

pkg_files(
    name = "yaml_files",
    srcs = glob(
        ["**/*.yaml"],
        exclude = ["serving-benchmarking/**"],
    ),
    prefix = "benchmark",
    visibility = ["//visibility:public"],
)
