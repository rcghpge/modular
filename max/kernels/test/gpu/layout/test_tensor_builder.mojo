# ===----------------------------------------------------------------------=== #
# Copyright (c) 2025, Modular Inc. All rights reserved.
#
# Licensed under the Apache License v2.0 with LLVM Exceptions:
# https://llvm.org/LICENSE.txt
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ===----------------------------------------------------------------------=== #

from gpu.host import DeviceContext
from layout import Layout, LayoutTensor
from layout._fillers import *
from layout.tensor_builder import LayoutTensorBuild as tb
from layout.tensor_builder import dynamic, static

from utils.index import Index


fn print_tensor_info[gpu: Bool = False](tensor: LayoutTensor):
    print("---tensor-begin---")

    @parameter
    if not gpu:
        print("layout: ", tensor.layout)
    print("runtime_layout: ", tensor.runtime_layout)
    print("address_space: ", Int(tensor.address_space))
    print("values:")
    print(tensor)
    print("---tensor-end---")


fn test_row_major():
    print("== test_tensor_builder_row_major")
    # CHECK-LABEL: test_tensor_builder_row_major
    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((2, 3):(3, 1))
    # CHECK: runtime_layout:  ((2, 3):(3, 1))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 1.0 2.0
    # CHECK: 3.0 4.0 5.0
    # CHECK: ---tensor-end---

    var t_2d_static = (
        tb[DType.float32]().row_major(static[2](), static[3]()).alloc()
    )
    arange(t_2d_static)
    print_tensor_info(t_2d_static)

    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((-1, -1):(-1, 1))
    # CHECK: runtime_layout:  ((2, 3):(3, 1))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 1.0 2.0
    # CHECK: 3.0 4.0 5.0
    # CHECK: ---tensor-end---

    var t_2d_dynamic = tb[DType.float32]().row_major(2, 3).view(t_2d_static.ptr)
    arange(t_2d_dynamic)
    print_tensor_info(t_2d_dynamic)
    _ = t_2d_static

    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((2, 3, 4):(12, 4, 1))
    # CHECK: runtime_layout:  ((2, 3, 4):(12, 4, 1))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 12.0 4.0 16.0 8.0 20.0 1.0 13.0 5.0 17.0 9.0 21.0 2.0 14.0 6.0 18.0 10.0 22.0 3.0 15.0 7.0 19.0 11.0 23.0
    # CHECK: ---tensor-end---

    var t_3d_static = (
        tb[DType.float32]()
        .row_major(static[2](), static[3](), static[4]())
        .alloc()
    )
    arange(t_3d_static)
    print_tensor_info(t_3d_static)

    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((-1, -1, -1):(-1, -1, 1))
    # CHECK: runtime_layout:  ((2, 3, 4):(12, 4, 1))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 12.0 4.0 16.0 8.0 20.0 1.0 13.0 5.0 17.0 9.0 21.0 2.0 14.0 6.0 18.0 10.0 22.0 3.0 15.0 7.0 19.0 11.0 23.0
    # CHECK: ---tensor-end---

    var t_3d_dynamic = (
        tb[DType.float32]().row_major(2, 3, 4).view(t_3d_static.ptr)
    )
    arange(t_3d_dynamic)
    print_tensor_info(t_3d_dynamic)
    _ = t_3d_static

    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((2, 3, 4, 5):(60, 20, 5, 1))
    # CHECK: runtime_layout:  ((2, 3, 4, 5):(60, 20, 5, 1))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 60.0 20.0 80.0 40.0 100.0 5.0 65.0 25.0 85.0 45.0 105.0 10.0 70.0 30.0 90.0 50.0 110.0 15.0 75.0 35.0 95.0 55.0 115.0 1.0 61.0 21.0 81.0 41.0 101.0 6.0 66.0 26.0 86.0 46.0 106.0 11.0 71.0 31.0 91.0 51.0 111.0 16.0 76.0 36.0 96.0 56.0 116.0 2.0 62.0 22.0 82.0 42.0 102.0 7.0 67.0 27.0 87.0 47.0 107.0 12.0 72.0 32.0 92.0 52.0 112.0 17.0 77.0 37.0 97.0 57.0 117.0 3.0 63.0 23.0 83.0 43.0 103.0 8.0 68.0 28.0 88.0 48.0 108.0 13.0 73.0 33.0 93.0 53.0 113.0 18.0 78.0 38.0 98.0 58.0 118.0 4.0 64.0 24.0 84.0 44.0 104.0 9.0 69.0 29.0 89.0 49.0 109.0 14.0 74.0 34.0 94.0 54.0 114.0 19.0 79.0 39.0 99.0 59.0 119.0
    # CHECK: ---tensor-end---

    var t_4d_static = (
        tb[DType.float32]()
        .row_major(static[2](), static[3](), static[4](), static[5]())
        .alloc()
    )
    arange(t_4d_static)
    print_tensor_info(t_4d_static)

    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((-1, -1, -1, -1):(-1, -1, -1, 1))
    # CHECK: runtime_layout:  ((2, 3, 4, 5):(60, 20, 5, 1))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 60.0 20.0 80.0 40.0 100.0 5.0 65.0 25.0 85.0 45.0 105.0 10.0 70.0 30.0 90.0 50.0 110.0 15.0 75.0 35.0 95.0 55.0 115.0 1.0 61.0 21.0 81.0 41.0 101.0 6.0 66.0 26.0 86.0 46.0 106.0 11.0 71.0 31.0 91.0 51.0 111.0 16.0 76.0 36.0 96.0 56.0 116.0 2.0 62.0 22.0 82.0 42.0 102.0 7.0 67.0 27.0 87.0 47.0 107.0 12.0 72.0 32.0 92.0 52.0 112.0 17.0 77.0 37.0 97.0 57.0 117.0 3.0 63.0 23.0 83.0 43.0 103.0 8.0 68.0 28.0 88.0 48.0 108.0 13.0 73.0 33.0 93.0 53.0 113.0 18.0 78.0 38.0 98.0 58.0 118.0 4.0 64.0 24.0 84.0 44.0 104.0 9.0 69.0 29.0 89.0 49.0 109.0 14.0 74.0 34.0 94.0 54.0 114.0 19.0 79.0 39.0 99.0 59.0 119.0
    # CHECK: ---tensor-end---

    var t_4d_dynamic = (
        tb[DType.float32]().row_major(2, 3, 4, 5).view(t_4d_static.ptr)
    )
    arange(t_4d_dynamic)
    print_tensor_info(t_4d_dynamic)
    _ = t_4d_static

    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((2, 3, 4, 5, 6):(360, 120, 30, 6, 1))
    # CHECK: runtime_layout:  ((2, 3, 4, 5, 6):(360, 120, 30, 6, 1))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 360.0 120.0 480.0 240.0 600.0 30.0 390.0 150.0 510.0 270.0 630.0 60.0 420.0 180.0 540.0 300.0 660.0 90.0 450.0 210.0 570.0 330.0 690.0 6.0 366.0 126.0 486.0 246.0 606.0 36.0 396.0 156.0 516.0 276.0 636.0 66.0 426.0 186.0 546.0 306.0 666.0 96.0 456.0 216.0 576.0 336.0 696.0 12.0 372.0 132.0 492.0 252.0 612.0 42.0 402.0 162.0 522.0 282.0 642.0 72.0 432.0 192.0 552.0 312.0 672.0 102.0 462.0 222.0 582.0 342.0 702.0 18.0 378.0 138.0 498.0 258.0 618.0 48.0 408.0 168.0 528.0 288.0 648.0 78.0 438.0 198.0 558.0 318.0 678.0 108.0 468.0 228.0 588.0 348.0 708.0 24.0 384.0 144.0 504.0 264.0 624.0 54.0 414.0 174.0 534.0 294.0 654.0 84.0 444.0 204.0 564.0 324.0 684.0 114.0 474.0 234.0 594.0 354.0 714.0 1.0 361.0 121.0 481.0 241.0 601.0 31.0 391.0 151.0 511.0 271.0 631.0 61.0 421.0 181.0 541.0 301.0 661.0 91.0 451.0 211.0 571.0 331.0 691.0 7.0 367.0 127.0 487.0 247.0 607.0 37.0 397.0 157.0 517.0 277.0 637.0 67.0 427.0 187.0 547.0 307.0 667.0 97.0 457.0 217.0 577.0 337.0 697.0 13.0 373.0 133.0 493.0 253.0 613.0 43.0 403.0 163.0 523.0 283.0 643.0 73.0 433.0 193.0 553.0 313.0 673.0 103.0 463.0 223.0 583.0 343.0 703.0 19.0 379.0 139.0 499.0 259.0 619.0 49.0 409.0 169.0 529.0 289.0 649.0 79.0 439.0 199.0 559.0 319.0 679.0 109.0 469.0 229.0 589.0 349.0 709.0 25.0 385.0 145.0 505.0 265.0 625.0 55.0 415.0 175.0 535.0 295.0 655.0 85.0 445.0 205.0 565.0 325.0 685.0 115.0 475.0 235.0 595.0 355.0 715.0 2.0 362.0 122.0 482.0 242.0 602.0 32.0 392.0 152.0 512.0 272.0 632.0 62.0 422.0 182.0 542.0 302.0 662.0 92.0 452.0 212.0 572.0 332.0 692.0 8.0 368.0 128.0 488.0 248.0 608.0 38.0 398.0 158.0 518.0 278.0 638.0 68.0 428.0 188.0 548.0 308.0 668.0 98.0 458.0 218.0 578.0 338.0 698.0 14.0 374.0 134.0 494.0 254.0 614.0 44.0 404.0 164.0 524.0 284.0 644.0 74.0 434.0 194.0 554.0 314.0 674.0 104.0 464.0 224.0 584.0 344.0 704.0 20.0 380.0 140.0 500.0 260.0 620.0 50.0 410.0 170.0 530.0 290.0 650.0 80.0 440.0 200.0 560.0 320.0 680.0 110.0 470.0 230.0 590.0 350.0 710.0 26.0 386.0 146.0 506.0 266.0 626.0 56.0 416.0 176.0 536.0 296.0 656.0 86.0 446.0 206.0 566.0 326.0 686.0 116.0 476.0 236.0 596.0 356.0 716.0 3.0 363.0 123.0 483.0 243.0 603.0 33.0 393.0 153.0 513.0 273.0 633.0 63.0 423.0 183.0 543.0 303.0 663.0 93.0 453.0 213.0 573.0 333.0 693.0 9.0 369.0 129.0 489.0 249.0 609.0 39.0 399.0 159.0 519.0 279.0 639.0 69.0 429.0 189.0 549.0 309.0 669.0 99.0 459.0 219.0 579.0 339.0 699.0 15.0 375.0 135.0 495.0 255.0 615.0 45.0 405.0 165.0 525.0 285.0 645.0 75.0 435.0 195.0 555.0 315.0 675.0 105.0 465.0 225.0 585.0 345.0 705.0 21.0 381.0 141.0 501.0 261.0 621.0 51.0 411.0 171.0 531.0 291.0 651.0 81.0 441.0 201.0 561.0 321.0 681.0 111.0 471.0 231.0 591.0 351.0 711.0 27.0 387.0 147.0 507.0 267.0 627.0 57.0 417.0 177.0 537.0 297.0 657.0 87.0 447.0 207.0 567.0 327.0 687.0 117.0 477.0 237.0 597.0 357.0 717.0 4.0 364.0 124.0 484.0 244.0 604.0 34.0 394.0 154.0 514.0 274.0 634.0 64.0 424.0 184.0 544.0 304.0 664.0 94.0 454.0 214.0 574.0 334.0 694.0 10.0 370.0 130.0 490.0 250.0 610.0 40.0 400.0 160.0 520.0 280.0 640.0 70.0 430.0 190.0 550.0 310.0 670.0 100.0 460.0 220.0 580.0 340.0 700.0 16.0 376.0 136.0 496.0 256.0 616.0 46.0 406.0 166.0 526.0 286.0 646.0 76.0 436.0 196.0 556.0 316.0 676.0 106.0 466.0 226.0 586.0 346.0 706.0 22.0 382.0 142.0 502.0 262.0 622.0 52.0 412.0 172.0 532.0 292.0 652.0 82.0 442.0 202.0 562.0 322.0 682.0 112.0 472.0 232.0 592.0 352.0 712.0 28.0 388.0 148.0 508.0 268.0 628.0 58.0 418.0 178.0 538.0 298.0 658.0 88.0 448.0 208.0 568.0 328.0 688.0 118.0 478.0 238.0 598.0 358.0 718.0 5.0 365.0 125.0 485.0 245.0 605.0 35.0 395.0 155.0 515.0 275.0 635.0 65.0 425.0 185.0 545.0 305.0 665.0 95.0 455.0 215.0 575.0 335.0 695.0 11.0 371.0 131.0 491.0 251.0 611.0 41.0 401.0 161.0 521.0 281.0 641.0 71.0 431.0 191.0 551.0 311.0 671.0 101.0 461.0 221.0 581.0 341.0 701.0 17.0 377.0 137.0 497.0 257.0 617.0 47.0 407.0 167.0 527.0 287.0 647.0 77.0 437.0 197.0 557.0 317.0 677.0 107.0 467.0 227.0 587.0 347.0 707.0 23.0 383.0 143.0 503.0 263.0 623.0 53.0 413.0 173.0 533.0 293.0 653.0 83.0 443.0 203.0 563.0 323.0 683.0 113.0 473.0 233.0 593.0 353.0 713.0 29.0 389.0 149.0 509.0 269.0 629.0 59.0 419.0 179.0 539.0 299.0 659.0 89.0 449.0 209.0 569.0 329.0 689.0 119.0 479.0 239.0 599.0 359.0 719.0
    # CHECK: ---tensor-end---

    var t_5d_static_ = tb[DType.float32]().row_major[2, 3, 4, 5, 6]().alloc()
    arange(t_5d_static_)
    print_tensor_info(t_5d_static_)

    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((2, 3, 4, 5, 6):(360, 120, 30, 6, 1))
    # CHECK: runtime_layout:  ((2, 3, 4, 5, 6):(360, 120, 30, 6, 1))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 360.0 120.0 480.0 240.0 600.0 30.0 390.0 150.0 510.0 270.0 630.0 60.0 420.0 180.0 540.0 300.0 660.0 90.0 450.0 210.0 570.0 330.0 690.0 6.0 366.0 126.0 486.0 246.0 606.0 36.0 396.0 156.0 516.0 276.0 636.0 66.0 426.0 186.0 546.0 306.0 666.0 96.0 456.0 216.0 576.0 336.0 696.0 12.0 372.0 132.0 492.0 252.0 612.0 42.0 402.0 162.0 522.0 282.0 642.0 72.0 432.0 192.0 552.0 312.0 672.0 102.0 462.0 222.0 582.0 342.0 702.0 18.0 378.0 138.0 498.0 258.0 618.0 48.0 408.0 168.0 528.0 288.0 648.0 78.0 438.0 198.0 558.0 318.0 678.0 108.0 468.0 228.0 588.0 348.0 708.0 24.0 384.0 144.0 504.0 264.0 624.0 54.0 414.0 174.0 534.0 294.0 654.0 84.0 444.0 204.0 564.0 324.0 684.0 114.0 474.0 234.0 594.0 354.0 714.0 1.0 361.0 121.0 481.0 241.0 601.0 31.0 391.0 151.0 511.0 271.0 631.0 61.0 421.0 181.0 541.0 301.0 661.0 91.0 451.0 211.0 571.0 331.0 691.0 7.0 367.0 127.0 487.0 247.0 607.0 37.0 397.0 157.0 517.0 277.0 637.0 67.0 427.0 187.0 547.0 307.0 667.0 97.0 457.0 217.0 577.0 337.0 697.0 13.0 373.0 133.0 493.0 253.0 613.0 43.0 403.0 163.0 523.0 283.0 643.0 73.0 433.0 193.0 553.0 313.0 673.0 103.0 463.0 223.0 583.0 343.0 703.0 19.0 379.0 139.0 499.0 259.0 619.0 49.0 409.0 169.0 529.0 289.0 649.0 79.0 439.0 199.0 559.0 319.0 679.0 109.0 469.0 229.0 589.0 349.0 709.0 25.0 385.0 145.0 505.0 265.0 625.0 55.0 415.0 175.0 535.0 295.0 655.0 85.0 445.0 205.0 565.0 325.0 685.0 115.0 475.0 235.0 595.0 355.0 715.0 2.0 362.0 122.0 482.0 242.0 602.0 32.0 392.0 152.0 512.0 272.0 632.0 62.0 422.0 182.0 542.0 302.0 662.0 92.0 452.0 212.0 572.0 332.0 692.0 8.0 368.0 128.0 488.0 248.0 608.0 38.0 398.0 158.0 518.0 278.0 638.0 68.0 428.0 188.0 548.0 308.0 668.0 98.0 458.0 218.0 578.0 338.0 698.0 14.0 374.0 134.0 494.0 254.0 614.0 44.0 404.0 164.0 524.0 284.0 644.0 74.0 434.0 194.0 554.0 314.0 674.0 104.0 464.0 224.0 584.0 344.0 704.0 20.0 380.0 140.0 500.0 260.0 620.0 50.0 410.0 170.0 530.0 290.0 650.0 80.0 440.0 200.0 560.0 320.0 680.0 110.0 470.0 230.0 590.0 350.0 710.0 26.0 386.0 146.0 506.0 266.0 626.0 56.0 416.0 176.0 536.0 296.0 656.0 86.0 446.0 206.0 566.0 326.0 686.0 116.0 476.0 236.0 596.0 356.0 716.0 3.0 363.0 123.0 483.0 243.0 603.0 33.0 393.0 153.0 513.0 273.0 633.0 63.0 423.0 183.0 543.0 303.0 663.0 93.0 453.0 213.0 573.0 333.0 693.0 9.0 369.0 129.0 489.0 249.0 609.0 39.0 399.0 159.0 519.0 279.0 639.0 69.0 429.0 189.0 549.0 309.0 669.0 99.0 459.0 219.0 579.0 339.0 699.0 15.0 375.0 135.0 495.0 255.0 615.0 45.0 405.0 165.0 525.0 285.0 645.0 75.0 435.0 195.0 555.0 315.0 675.0 105.0 465.0 225.0 585.0 345.0 705.0 21.0 381.0 141.0 501.0 261.0 621.0 51.0 411.0 171.0 531.0 291.0 651.0 81.0 441.0 201.0 561.0 321.0 681.0 111.0 471.0 231.0 591.0 351.0 711.0 27.0 387.0 147.0 507.0 267.0 627.0 57.0 417.0 177.0 537.0 297.0 657.0 87.0 447.0 207.0 567.0 327.0 687.0 117.0 477.0 237.0 597.0 357.0 717.0 4.0 364.0 124.0 484.0 244.0 604.0 34.0 394.0 154.0 514.0 274.0 634.0 64.0 424.0 184.0 544.0 304.0 664.0 94.0 454.0 214.0 574.0 334.0 694.0 10.0 370.0 130.0 490.0 250.0 610.0 40.0 400.0 160.0 520.0 280.0 640.0 70.0 430.0 190.0 550.0 310.0 670.0 100.0 460.0 220.0 580.0 340.0 700.0 16.0 376.0 136.0 496.0 256.0 616.0 46.0 406.0 166.0 526.0 286.0 646.0 76.0 436.0 196.0 556.0 316.0 676.0 106.0 466.0 226.0 586.0 346.0 706.0 22.0 382.0 142.0 502.0 262.0 622.0 52.0 412.0 172.0 532.0 292.0 652.0 82.0 442.0 202.0 562.0 322.0 682.0 112.0 472.0 232.0 592.0 352.0 712.0 28.0 388.0 148.0 508.0 268.0 628.0 58.0 418.0 178.0 538.0 298.0 658.0 88.0 448.0 208.0 568.0 328.0 688.0 118.0 478.0 238.0 598.0 358.0 718.0 5.0 365.0 125.0 485.0 245.0 605.0 35.0 395.0 155.0 515.0 275.0 635.0 65.0 425.0 185.0 545.0 305.0 665.0 95.0 455.0 215.0 575.0 335.0 695.0 11.0 371.0 131.0 491.0 251.0 611.0 41.0 401.0 161.0 521.0 281.0 641.0 71.0 431.0 191.0 551.0 311.0 671.0 101.0 461.0 221.0 581.0 341.0 701.0 17.0 377.0 137.0 497.0 257.0 617.0 47.0 407.0 167.0 527.0 287.0 647.0 77.0 437.0 197.0 557.0 317.0 677.0 107.0 467.0 227.0 587.0 347.0 707.0 23.0 383.0 143.0 503.0 263.0 623.0 53.0 413.0 173.0 533.0 293.0 653.0 83.0 443.0 203.0 563.0 323.0 683.0 113.0 473.0 233.0 593.0 353.0 713.0 29.0 389.0 149.0 509.0 269.0 629.0 59.0 419.0 179.0 539.0 299.0 659.0 89.0 449.0 209.0 569.0 329.0 689.0 119.0 479.0 239.0 599.0 359.0 719.0
    # CHECK: ---tensor-end---

    var t_5d_static = (
        tb[DType.float32]()
        .row_major(
            static[2](), static[3](), static[4](), static[5](), static[6]()
        )
        .alloc()
    )
    arange(t_5d_static)
    print_tensor_info(t_5d_static)

    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((-1, -1, -1, -1, -1):(-1, -1, -1, -1, 1))
    # CHECK: runtime_layout:  ((2, 3, 4, 5, 6):(360, 120, 30, 6, 1))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 360.0 120.0 480.0 240.0 600.0 30.0 390.0 150.0 510.0 270.0 630.0 60.0 420.0 180.0 540.0 300.0 660.0 90.0 450.0 210.0 570.0 330.0 690.0 6.0 366.0 126.0 486.0 246.0 606.0 36.0 396.0 156.0 516.0 276.0 636.0 66.0 426.0 186.0 546.0 306.0 666.0 96.0 456.0 216.0 576.0 336.0 696.0 12.0 372.0 132.0 492.0 252.0 612.0 42.0 402.0 162.0 522.0 282.0 642.0 72.0 432.0 192.0 552.0 312.0 672.0 102.0 462.0 222.0 582.0 342.0 702.0 18.0 378.0 138.0 498.0 258.0 618.0 48.0 408.0 168.0 528.0 288.0 648.0 78.0 438.0 198.0 558.0 318.0 678.0 108.0 468.0 228.0 588.0 348.0 708.0 24.0 384.0 144.0 504.0 264.0 624.0 54.0 414.0 174.0 534.0 294.0 654.0 84.0 444.0 204.0 564.0 324.0 684.0 114.0 474.0 234.0 594.0 354.0 714.0 1.0 361.0 121.0 481.0 241.0 601.0 31.0 391.0 151.0 511.0 271.0 631.0 61.0 421.0 181.0 541.0 301.0 661.0 91.0 451.0 211.0 571.0 331.0 691.0 7.0 367.0 127.0 487.0 247.0 607.0 37.0 397.0 157.0 517.0 277.0 637.0 67.0 427.0 187.0 547.0 307.0 667.0 97.0 457.0 217.0 577.0 337.0 697.0 13.0 373.0 133.0 493.0 253.0 613.0 43.0 403.0 163.0 523.0 283.0 643.0 73.0 433.0 193.0 553.0 313.0 673.0 103.0 463.0 223.0 583.0 343.0 703.0 19.0 379.0 139.0 499.0 259.0 619.0 49.0 409.0 169.0 529.0 289.0 649.0 79.0 439.0 199.0 559.0 319.0 679.0 109.0 469.0 229.0 589.0 349.0 709.0 25.0 385.0 145.0 505.0 265.0 625.0 55.0 415.0 175.0 535.0 295.0 655.0 85.0 445.0 205.0 565.0 325.0 685.0 115.0 475.0 235.0 595.0 355.0 715.0 2.0 362.0 122.0 482.0 242.0 602.0 32.0 392.0 152.0 512.0 272.0 632.0 62.0 422.0 182.0 542.0 302.0 662.0 92.0 452.0 212.0 572.0 332.0 692.0 8.0 368.0 128.0 488.0 248.0 608.0 38.0 398.0 158.0 518.0 278.0 638.0 68.0 428.0 188.0 548.0 308.0 668.0 98.0 458.0 218.0 578.0 338.0 698.0 14.0 374.0 134.0 494.0 254.0 614.0 44.0 404.0 164.0 524.0 284.0 644.0 74.0 434.0 194.0 554.0 314.0 674.0 104.0 464.0 224.0 584.0 344.0 704.0 20.0 380.0 140.0 500.0 260.0 620.0 50.0 410.0 170.0 530.0 290.0 650.0 80.0 440.0 200.0 560.0 320.0 680.0 110.0 470.0 230.0 590.0 350.0 710.0 26.0 386.0 146.0 506.0 266.0 626.0 56.0 416.0 176.0 536.0 296.0 656.0 86.0 446.0 206.0 566.0 326.0 686.0 116.0 476.0 236.0 596.0 356.0 716.0 3.0 363.0 123.0 483.0 243.0 603.0 33.0 393.0 153.0 513.0 273.0 633.0 63.0 423.0 183.0 543.0 303.0 663.0 93.0 453.0 213.0 573.0 333.0 693.0 9.0 369.0 129.0 489.0 249.0 609.0 39.0 399.0 159.0 519.0 279.0 639.0 69.0 429.0 189.0 549.0 309.0 669.0 99.0 459.0 219.0 579.0 339.0 699.0 15.0 375.0 135.0 495.0 255.0 615.0 45.0 405.0 165.0 525.0 285.0 645.0 75.0 435.0 195.0 555.0 315.0 675.0 105.0 465.0 225.0 585.0 345.0 705.0 21.0 381.0 141.0 501.0 261.0 621.0 51.0 411.0 171.0 531.0 291.0 651.0 81.0 441.0 201.0 561.0 321.0 681.0 111.0 471.0 231.0 591.0 351.0 711.0 27.0 387.0 147.0 507.0 267.0 627.0 57.0 417.0 177.0 537.0 297.0 657.0 87.0 447.0 207.0 567.0 327.0 687.0 117.0 477.0 237.0 597.0 357.0 717.0 4.0 364.0 124.0 484.0 244.0 604.0 34.0 394.0 154.0 514.0 274.0 634.0 64.0 424.0 184.0 544.0 304.0 664.0 94.0 454.0 214.0 574.0 334.0 694.0 10.0 370.0 130.0 490.0 250.0 610.0 40.0 400.0 160.0 520.0 280.0 640.0 70.0 430.0 190.0 550.0 310.0 670.0 100.0 460.0 220.0 580.0 340.0 700.0 16.0 376.0 136.0 496.0 256.0 616.0 46.0 406.0 166.0 526.0 286.0 646.0 76.0 436.0 196.0 556.0 316.0 676.0 106.0 466.0 226.0 586.0 346.0 706.0 22.0 382.0 142.0 502.0 262.0 622.0 52.0 412.0 172.0 532.0 292.0 652.0 82.0 442.0 202.0 562.0 322.0 682.0 112.0 472.0 232.0 592.0 352.0 712.0 28.0 388.0 148.0 508.0 268.0 628.0 58.0 418.0 178.0 538.0 298.0 658.0 88.0 448.0 208.0 568.0 328.0 688.0 118.0 478.0 238.0 598.0 358.0 718.0 5.0 365.0 125.0 485.0 245.0 605.0 35.0 395.0 155.0 515.0 275.0 635.0 65.0 425.0 185.0 545.0 305.0 665.0 95.0 455.0 215.0 575.0 335.0 695.0 11.0 371.0 131.0 491.0 251.0 611.0 41.0 401.0 161.0 521.0 281.0 641.0 71.0 431.0 191.0 551.0 311.0 671.0 101.0 461.0 221.0 581.0 341.0 701.0 17.0 377.0 137.0 497.0 257.0 617.0 47.0 407.0 167.0 527.0 287.0 647.0 77.0 437.0 197.0 557.0 317.0 677.0 107.0 467.0 227.0 587.0 347.0 707.0 23.0 383.0 143.0 503.0 263.0 623.0 53.0 413.0 173.0 533.0 293.0 653.0 83.0 443.0 203.0 563.0 323.0 683.0 113.0 473.0 233.0 593.0 353.0 713.0 29.0 389.0 149.0 509.0 269.0 629.0 59.0 419.0 179.0 539.0 299.0 659.0 89.0 449.0 209.0 569.0 329.0 689.0 119.0 479.0 239.0 599.0 359.0 719.0

    var t_5d_dynamic = (
        tb[DType.float32]().row_major(2, 3, 4, 5, 6).view(t_5d_static.ptr)
    )
    arange(t_5d_dynamic)
    print_tensor_info(t_5d_dynamic)
    _ = t_5d_static

    var tensor = tb[DType.bfloat16]().row_major[8, 8]().alloc()
    _ = tensor.fill(-1)
    var tile = tensor.tile[4, 4](0, 0).vectorize[1, 2]().fill(1)
    print_tensor_info(tensor)
    # CHECK: ---tensor-begin---
    # CHECK: layout: ((8, 8):(8, 1))
    # CHECK: address_space: 0
    # CHECK: values:
    # CHECK: 1.0 1.0 1.0 1.0 -1.0 -1.0 -1.0 -1.0
    # CHECK: 1.0 1.0 1.0 1.0 -1.0 -1.0 -1.0 -1.0
    # CHECK: 1.0 1.0 1.0 1.0 -1.0 -1.0 -1.0 -1.0
    # CHECK: 1.0 1.0 1.0 1.0 -1.0 -1.0 -1.0 -1.0
    # CHECK: -1.0 -1.0 -1.0 -1.0 -1.0 -1.0 -1.0 -1.0
    # CHECK: -1.0 -1.0 -1.0 -1.0 -1.0 -1.0 -1.0 -1.0
    # CHECK: -1.0 -1.0 -1.0 -1.0 -1.0 -1.0 -1.0 -1.0
    # CHECK: -1.0 -1.0 -1.0 -1.0 -1.0 -1.0 -1.0 -1.0
    _ = tensor
    _ = tile

    var tensor_dynamic = (
        tb[DType.bfloat16]().row_major(dynamic(8), static[8]()).view(tensor.ptr)
    )
    _ = tensor_dynamic.fill(-1)
    var tile_dynamic = tensor_dynamic.tile[4, 4](0, 0).vectorize[1, 2]().fill(1)
    print_tensor_info(tensor_dynamic)
    # CHECK: ---tensor-begin---
    # CHECK: layout: ((-1, 8):(8, 1))
    # CHECK: runtime_layout: ((8, 8):(8, 1))
    # CHECK: address_space: 0
    # CHECK: values:
    # CHECK: 1.0 1.0 1.0 1.0 -1.0 -1.0 -1.0 -1.0
    # CHECK: 1.0 1.0 1.0 1.0 -1.0 -1.0 -1.0 -1.0
    # CHECK: 1.0 1.0 1.0 1.0 -1.0 -1.0 -1.0 -1.0
    # CHECK: 1.0 1.0 1.0 1.0 -1.0 -1.0 -1.0 -1.0
    # CHECK: -1.0 -1.0 -1.0 -1.0 -1.0 -1.0 -1.0 -1.0
    # CHECK: -1.0 -1.0 -1.0 -1.0 -1.0 -1.0 -1.0 -1.0
    # CHECK: -1.0 -1.0 -1.0 -1.0 -1.0 -1.0 -1.0 -1.0
    # CHECK: -1.0 -1.0 -1.0 -1.0 -1.0 -1.0 -1.0 -1.0
    # CHECK: ---tensor-end---
    _ = tensor_dynamic
    _ = tile_dynamic


fn test_col_major():
    print("== test_tensor_builder_col_major")
    # CHECK-LABEL: test_tensor_builder_col_major
    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((2, 3):(1, 2))
    # CHECK: runtime_layout:  ((2, 3):(1, 2))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 1.0 2.0
    # CHECK: 3.0 4.0 5.0
    # CHECK: ---tensor-end---

    var t_2d_static = (
        tb[DType.float32]().col_major(static[2](), static[3]()).alloc()
    )
    arange(t_2d_static)
    print_tensor_info(t_2d_static)

    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((-1, -1):(1, -1))
    # CHECK: runtime_layout:  ((2, 3):(1, 2))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 1.0 2.0
    # CHECK: 3.0 4.0 5.0
    # CHECK: ---tensor-end---

    var t_2d_dynamic = tb[DType.float32]().col_major(2, 3).view(t_2d_static.ptr)
    arange(t_2d_dynamic)
    print_tensor_info(t_2d_dynamic)
    _ = t_2d_static

    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((2, 3, 4):(1, 2, 6))
    # CHECK: runtime_layout:  ((2, 3, 4):(1, 2, 6))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 15.0 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0
    # CHECK: ---tensor-end---

    var t_3d_static = (
        tb[DType.float32]()
        .col_major(static[2](), static[3](), static[4]())
        .alloc()
    )
    arange(t_3d_static)
    print_tensor_info(t_3d_static)

    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((-1, -1, -1):(1, -1, -1))
    # CHECK: runtime_layout:  ((2, 3, 4):(1, 2, 6))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 15.0 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0
    # CHECK: ---tensor-end---

    var t_3d_dynamic = (
        tb[DType.float32]().col_major(2, 3, 4).view(t_3d_static.ptr)
    )
    arange(t_3d_dynamic)
    print_tensor_info(t_3d_dynamic)
    _ = t_3d_static

    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((2, 3, 4, 5):(1, 2, 6, 24))
    # CHECK: runtime_layout:  ((2, 3, 4, 5):(1, 2, 6, 24))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 15.0 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.0 30.0 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.0 59.0 60.0 61.0 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.0 117.0 118.0 119.0
    # CHECK: ---tensor-end---

    var t_4d_static = (
        tb[DType.float32]()
        .col_major(static[2](), static[3](), static[4](), static[5]())
        .alloc()
    )
    arange(t_4d_static)
    print_tensor_info(t_4d_static)

    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((-1, -1, -1, -1):(1, -1, -1, -1))
    # CHECK: runtime_layout:  ((2, 3, 4, 5):(1, 2, 6, 24))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 15.0 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.0 30.0 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.0 59.0 60.0 61.0 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.0 117.0 118.0 119.0

    var t_4d_dynamic = (
        tb[DType.float32]().col_major(2, 3, 4, 5).view(t_4d_static.ptr)
    )
    arange(t_4d_dynamic)
    print_tensor_info(t_4d_dynamic)
    _ = t_4d_static

    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((2, 3, 4, 5, 6):(1, 2, 6, 24, 120))
    # CHECK: runtime_layout:  ((2, 3, 4, 5, 6):(1, 2, 6, 24, 120))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 15.0 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.0 30.0 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.0 59.0 60.0 61.0 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.0 117.0 118.0 119.0 120.0 121.0 122.0 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.0 232.0 233.0 234.0 235.0 236.0 237.0 238.0 239.0 240.0 241.0 242.0 243.0 244.0 245.0 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 441.0 442.0 443.0 444.0 445.0 446.0 447.0 448.0 449.0 450.0 451.0 452.0 453.0 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.0 463.0 464.0 465.0 466.0 467.0 468.0 469.0 470.0 471.0 472.0 473.0 474.0 475.0 476.0 477.0 478.0 479.0 480.0 481.0 482.0 483.0 484.0 485.0 486.0 487.0 488.0 489.0 490.0 491.0 492.0 493.0 494.0 495.0 496.0 497.0 498.0 499.0 500.0 501.0 502.0 503.0 504.0 505.0 506.0 507.0 508.0 509.0 510.0 511.0 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0
    # CHECK: ---tensor-end---

    var t_5d_static_ = tb[DType.float32]().col_major[2, 3, 4, 5, 6]().alloc()
    arange(t_5d_static_)
    print_tensor_info(t_5d_static_)

    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((2, 3, 4, 5, 6):(1, 2, 6, 24, 120))
    # CHECK: runtime_layout:  ((2, 3, 4, 5, 6):(1, 2, 6, 24, 120))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 15.0 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.0 30.0 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.0 59.0 60.0 61.0 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.0 117.0 118.0 119.0 120.0 121.0 122.0 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.0 232.0 233.0 234.0 235.0 236.0 237.0 238.0 239.0 240.0 241.0 242.0 243.0 244.0 245.0 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 441.0 442.0 443.0 444.0 445.0 446.0 447.0 448.0 449.0 450.0 451.0 452.0 453.0 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.0 463.0 464.0 465.0 466.0 467.0 468.0 469.0 470.0 471.0 472.0 473.0 474.0 475.0 476.0 477.0 478.0 479.0 480.0 481.0 482.0 483.0 484.0 485.0 486.0 487.0 488.0 489.0 490.0 491.0 492.0 493.0 494.0 495.0 496.0 497.0 498.0 499.0 500.0 501.0 502.0 503.0 504.0 505.0 506.0 507.0 508.0 509.0 510.0 511.0 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0
    # CHECK: ---tensor-end---

    var t_5d_static = (
        tb[DType.float32]()
        .col_major(
            static[2](), static[3](), static[4](), static[5](), static[6]()
        )
        .alloc()
    )
    arange(t_5d_static)
    print_tensor_info(t_5d_static)

    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((-1, -1, -1, -1, -1):(1, -1, -1, -1, -1))
    # CHECK: runtime_layout:  ((2, 3, 4, 5, 6):(1, 2, 6, 24, 120))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 15.0 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.0 30.0 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.0 59.0 60.0 61.0 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.0 117.0 118.0 119.0 120.0 121.0 122.0 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.0 232.0 233.0 234.0 235.0 236.0 237.0 238.0 239.0 240.0 241.0 242.0 243.0 244.0 245.0 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 441.0 442.0 443.0 444.0 445.0 446.0 447.0 448.0 449.0 450.0 451.0 452.0 453.0 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.0 463.0 464.0 465.0 466.0 467.0 468.0 469.0 470.0 471.0 472.0 473.0 474.0 475.0 476.0 477.0 478.0 479.0 480.0 481.0 482.0 483.0 484.0 485.0 486.0 487.0 488.0 489.0 490.0 491.0 492.0 493.0 494.0 495.0 496.0 497.0 498.0 499.0 500.0 501.0 502.0 503.0 504.0 505.0 506.0 507.0 508.0 509.0 510.0 511.0 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0

    var t_5d_dynamic = (
        tb[DType.float32]().col_major(2, 3, 4, 5, 6).view(t_5d_static.ptr)
    )
    arange(t_5d_dynamic)
    print_tensor_info(t_5d_dynamic)
    _ = t_5d_static

    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((-1, 3, -1, 5, -1):(1, -1, -1, -1, -1))
    # CHECK: runtime_layout:  ((2, 3, 4, 5, 6):(1, 2, 6, 24, 120))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 15.0 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0 24.0 25.0 26.0 27.0 28.0 29.0 30.0 31.0 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0 56.0 57.0 58.0 59.0 60.0 61.0 62.0 63.0 64.0 65.0 66.0 67.0 68.0 69.0 70.0 71.0 72.0 73.0 74.0 75.0 76.0 77.0 78.0 79.0 80.0 81.0 82.0 83.0 84.0 85.0 86.0 87.0 88.0 89.0 90.0 91.0 92.0 93.0 94.0 95.0 96.0 97.0 98.0 99.0 100.0 101.0 102.0 103.0 104.0 105.0 106.0 107.0 108.0 109.0 110.0 111.0 112.0 113.0 114.0 115.0 116.0 117.0 118.0 119.0 120.0 121.0 122.0 123.0 124.0 125.0 126.0 127.0 128.0 129.0 130.0 131.0 132.0 133.0 134.0 135.0 136.0 137.0 138.0 139.0 140.0 141.0 142.0 143.0 144.0 145.0 146.0 147.0 148.0 149.0 150.0 151.0 152.0 153.0 154.0 155.0 156.0 157.0 158.0 159.0 160.0 161.0 162.0 163.0 164.0 165.0 166.0 167.0 168.0 169.0 170.0 171.0 172.0 173.0 174.0 175.0 176.0 177.0 178.0 179.0 180.0 181.0 182.0 183.0 184.0 185.0 186.0 187.0 188.0 189.0 190.0 191.0 192.0 193.0 194.0 195.0 196.0 197.0 198.0 199.0 200.0 201.0 202.0 203.0 204.0 205.0 206.0 207.0 208.0 209.0 210.0 211.0 212.0 213.0 214.0 215.0 216.0 217.0 218.0 219.0 220.0 221.0 222.0 223.0 224.0 225.0 226.0 227.0 228.0 229.0 230.0 231.0 232.0 233.0 234.0 235.0 236.0 237.0 238.0 239.0 240.0 241.0 242.0 243.0 244.0 245.0 246.0 247.0 248.0 249.0 250.0 251.0 252.0 253.0 254.0 255.0 256.0 257.0 258.0 259.0 260.0 261.0 262.0 263.0 264.0 265.0 266.0 267.0 268.0 269.0 270.0 271.0 272.0 273.0 274.0 275.0 276.0 277.0 278.0 279.0 280.0 281.0 282.0 283.0 284.0 285.0 286.0 287.0 288.0 289.0 290.0 291.0 292.0 293.0 294.0 295.0 296.0 297.0 298.0 299.0 300.0 301.0 302.0 303.0 304.0 305.0 306.0 307.0 308.0 309.0 310.0 311.0 312.0 313.0 314.0 315.0 316.0 317.0 318.0 319.0 320.0 321.0 322.0 323.0 324.0 325.0 326.0 327.0 328.0 329.0 330.0 331.0 332.0 333.0 334.0 335.0 336.0 337.0 338.0 339.0 340.0 341.0 342.0 343.0 344.0 345.0 346.0 347.0 348.0 349.0 350.0 351.0 352.0 353.0 354.0 355.0 356.0 357.0 358.0 359.0 360.0 361.0 362.0 363.0 364.0 365.0 366.0 367.0 368.0 369.0 370.0 371.0 372.0 373.0 374.0 375.0 376.0 377.0 378.0 379.0 380.0 381.0 382.0 383.0 384.0 385.0 386.0 387.0 388.0 389.0 390.0 391.0 392.0 393.0 394.0 395.0 396.0 397.0 398.0 399.0 400.0 401.0 402.0 403.0 404.0 405.0 406.0 407.0 408.0 409.0 410.0 411.0 412.0 413.0 414.0 415.0 416.0 417.0 418.0 419.0 420.0 421.0 422.0 423.0 424.0 425.0 426.0 427.0 428.0 429.0 430.0 431.0 432.0 433.0 434.0 435.0 436.0 437.0 438.0 439.0 440.0 441.0 442.0 443.0 444.0 445.0 446.0 447.0 448.0 449.0 450.0 451.0 452.0 453.0 454.0 455.0 456.0 457.0 458.0 459.0 460.0 461.0 462.0 463.0 464.0 465.0 466.0 467.0 468.0 469.0 470.0 471.0 472.0 473.0 474.0 475.0 476.0 477.0 478.0 479.0 480.0 481.0 482.0 483.0 484.0 485.0 486.0 487.0 488.0 489.0 490.0 491.0 492.0 493.0 494.0 495.0 496.0 497.0 498.0 499.0 500.0 501.0 502.0 503.0 504.0 505.0 506.0 507.0 508.0 509.0 510.0 511.0 512.0 513.0 514.0 515.0 516.0 517.0 518.0 519.0 520.0 521.0 522.0 523.0 524.0 525.0 526.0 527.0 528.0 529.0 530.0 531.0 532.0 533.0 534.0 535.0 536.0 537.0 538.0 539.0 540.0 541.0 542.0 543.0 544.0 545.0 546.0 547.0 548.0 549.0 550.0 551.0 552.0 553.0 554.0 555.0 556.0 557.0 558.0 559.0 560.0 561.0 562.0 563.0 564.0 565.0 566.0 567.0 568.0 569.0 570.0 571.0 572.0 573.0 574.0 575.0 576.0 577.0 578.0 579.0 580.0 581.0 582.0 583.0 584.0 585.0 586.0 587.0 588.0 589.0 590.0 591.0 592.0 593.0 594.0 595.0 596.0 597.0 598.0 599.0 600.0 601.0 602.0 603.0 604.0 605.0 606.0 607.0 608.0 609.0 610.0 611.0 612.0 613.0 614.0 615.0 616.0 617.0 618.0 619.0 620.0 621.0 622.0 623.0 624.0 625.0 626.0 627.0 628.0 629.0 630.0 631.0 632.0 633.0 634.0 635.0 636.0 637.0 638.0 639.0 640.0 641.0 642.0 643.0 644.0 645.0 646.0 647.0 648.0 649.0 650.0 651.0 652.0 653.0 654.0 655.0 656.0 657.0 658.0 659.0 660.0 661.0 662.0 663.0 664.0 665.0 666.0 667.0 668.0 669.0 670.0 671.0 672.0 673.0 674.0 675.0 676.0 677.0 678.0 679.0 680.0 681.0 682.0 683.0 684.0 685.0 686.0 687.0 688.0 689.0 690.0 691.0 692.0 693.0 694.0 695.0 696.0 697.0 698.0 699.0 700.0 701.0 702.0 703.0 704.0 705.0 706.0 707.0 708.0 709.0 710.0 711.0 712.0 713.0 714.0 715.0 716.0 717.0 718.0 719.0

    var t_5d_mixed = (
        tb[DType.float32]()
        .col_major(2, static[3](), 4, static[5](), 6)
        .view(t_5d_static.ptr)
    )
    arange(t_5d_mixed)
    print_tensor_info(t_5d_mixed)
    _ = t_5d_static


fn test_shared_and_local() raises:
    print("== test_tensor_builder_shared_local")
    # CHECK-LABEL: test_tensor_builder_shared_local
    with DeviceContext() as ctx:

        fn test_shared_and_local():
            # CHECK: ---tensor-begin---
            # CHECK: runtime_layout:  ((2, 3):(1, 2))
            # CHECK: address_space:  3
            # CHECK: values:
            # CHECK: 0.0 1.0 2.0
            # CHECK: 3.0 4.0 5.0
            # CHECK: ---tensor-end---

            var t_shared = (
                tb[DType.float32]()
                .col_major(static[2](), static[3]())
                .shared()
                .alloc()
            )
            arange(t_shared)
            print_tensor_info[True](t_shared)
            # CHECK: ---tensor-begin---
            # CHECK: runtime_layout:  ((2, 3):(1, 2))
            # CHECK: address_space:  5
            # CHECK: values:
            # CHECK: 0.0 1.0 2.0
            # CHECK: 3.0 4.0 5.0
            # CHECK: ---tensor-end---

            var t_local = (
                tb[DType.float32]()
                .col_major(static[2](), static[3]())
                .local()
                .alloc()
            )
            arange(t_local)
            print_tensor_info[True](t_local)

        ctx.enqueue_function_checked[
            test_shared_and_local, test_shared_and_local
        ](grid_dim=1, block_dim=1)
        ctx.synchronize()


fn test_layout():
    # CHECK-LABEL: test_tensor_builder_layout
    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((2, 3):(1, 2))
    # CHECK: runtime_layout:  ((2, 3):(1, 2))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 1.0 2.0
    # CHECK: 3.0 4.0 5.0
    # CHECK: ---tensor-end---
    print("== test_tensor_builder_layout")
    var t = tb[DType.float32]().layout[2, Index(2, 3), Index(1, 2)]().alloc()
    arange(t)
    print_tensor_info(t)

    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((2, 3):(1, 2))
    # CHECK: runtime_layout:  ((2, 3):(1, 2))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 1.0 2.0
    # CHECK: 3.0 4.0 5.0
    # CHECK: ---tensor-end---
    var t_view = (
        tb[DType.float32]().layout[2, Index(2, 3), Index(1, 2)]().view(t.ptr)
    )
    print_tensor_info(t_view)

    # CHECK: ---tensor-begin---
    # CHECK: layout:  ((-1, -1):(-1, -1))
    # CHECK: runtime_layout:  ((2, 3):(1, 2))
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 1.0 2.0
    # CHECK: 3.0 4.0 5.0
    # CHECK: ---tensor-end---
    var t_dynamic = (
        tb[DType.float32]().layout(Index(2, 3), Index(1, 2)).view(t.ptr)
    )
    print_tensor_info(t_dynamic)
    _ = t

    # CHECK: ---tensor-begin---
    # CHECK: layout:  (10:1)
    # CHECK: runtime_layout:  (10:1)
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0
    # CHECK: ---tensor-end---
    var t_vector = tb[DType.float32]().layout[10]().alloc()
    arange(t_vector)
    print_tensor_info(t_vector)

    # CHECK: ---tensor-begin---
    # CHECK: layout:  (-1:1)
    # CHECK: runtime_layout:  (10:1)
    # CHECK: address_space:  0
    # CHECK: values:
    # CHECK: 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0
    # CHECK: ---tensor-end---
    var t_vector_rt = tb[DType.float32]().layout(10).view(t_vector.ptr)
    arange(t_vector_rt)
    print_tensor_info(t_vector_rt)
    _ = t_vector


# CHECK-LABEL: test_iterator
fn test_iterator():
    print("== test_iterator")
    alias size = 64
    var tensor = tb[DType.float32]().row_major[size, 1]().alloc()
    arange(tensor)
    # Reshape iterator.
    # CHECK: 12.0 13.0
    # CHECK: 14.0 15.0
    # CHECK: 16.0 17.0
    var iter2x3 = tb[DType.float32]().row_major[2, 3]().iter(tensor.ptr, size)

    # LayoutTensorIter[DType.float32, Layout.row_major(2, 3)](tensor.ptr, size)
    iter2x3 += 1
    var iter3x2_static = iter2x3.reshape[Layout.row_major(3, 2)]()
    iter3x2_static += 1
    print(iter3x2_static[])

    var iter_circular = (
        tb[DType.float32]().row_major[8, 8]().circular().iter(tensor.ptr, size)
    )
    iter_circular += 100
    # CHECK: 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0
    # CHECK: 8.0 9.0 10.0 11.0 12.0 13.0 14.0 15.0
    # CHECK: 16.0 17.0 18.0 19.0 20.0 21.0 22.0 23.0
    # CHECK: 24.0 25.0 26.0 27.0 28.0 29.0 30.0 31.0
    # CHECK: 32.0 33.0 34.0 35.0 36.0 37.0 38.0 39.0
    # CHECK: 40.0 41.0 42.0 43.0 44.0 45.0 46.0 47.0
    # CHECK: 48.0 49.0 50.0 51.0 52.0 53.0 54.0 55.0
    # CHECK: 56.0 57.0 58.0 59.0 60.0 61.0 62.0 63.0
    print(iter_circular[])


fn main() raises:
    test_row_major()
    test_col_major()
    test_shared_and_local()
    test_layout()
    test_iterator()
