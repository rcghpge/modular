# generated by datamodel-codegen:
#   filename:  kserve.yaml
#   timestamp: 2024-08-15T22:19:28+00:00

from __future__ import annotations

from typing import Any

from pydantic import BaseModel, Field, RootModel


class MetadataServerResponse(BaseModel):
    name: str
    version: str
    extensions: list[str]


class MetadataServerErrorResponse(BaseModel):
    error: str


class MetadataTensor(BaseModel):
    name: str
    datatype: str
    shape: list[int]


class MetadataModelErrorResponse(BaseModel):
    error: str


class Parameters(BaseModel):
    pass


class TensorData(RootModel[list[Any]]):
    root: list[Any] = Field(..., title="tensor_data")


class RequestOutput(BaseModel):
    name: str
    parameters: Parameters | None = None


class ResponseOutput(BaseModel):
    name: str
    shape: list[int]
    datatype: str
    parameters: Parameters | None = None
    data: TensorData


class InferenceResponse(BaseModel):
    model_name: str
    model_version: str | None = None
    id: str | None = None
    parameters: Parameters | None = None
    outputs: list[ResponseOutput]


class InferenceErrorResponse(BaseModel):
    error: str | None = None


class MetadataModelResponse(BaseModel):
    name: str
    versions: list[str] | None = None
    platform: str
    inputs: list[MetadataTensor] | None = None
    outputs: list[MetadataTensor] | None = None


class RequestInput(BaseModel):
    name: str
    shape: list[int]
    datatype: str
    parameters: Parameters | None = None
    data: TensorData


class InferenceRequest(BaseModel):
    id: str | None = None
    parameters: Parameters | None = None
    inputs: list[RequestInput]
    outputs: list[RequestOutput] | None = None
