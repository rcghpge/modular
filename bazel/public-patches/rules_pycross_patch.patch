From ccafa1f5bdeb2b09fea0c9d9e473e571d84e5c34 Mon Sep 17 00:00:00 2001
From: Alex Trotta <atrotta@modular.com>
Date: Wed, 22 Oct 2025 12:16:23 -0400
Subject: [PATCH] feat: Add ability to patch wheels after installation

Couple workarounds that I needed here:
- Can't use bazel's native patching tools, since those are only usable with repository contexts, and these installations are happing at build time. So instead using patch-ng to patch in python (it specifically only supports unified diffs).
- Can't use patch-ng from PyPI, as it only ships sdists. This would cause a bootstrapping problem I believe, as we would need to build the library first. So using as a module, since it's a single file with no dependencies.
---
 MODULE.bazel                             | 22 ++++++++++++++++++++++
 pycross/private/tools/BUILD.bazel        |  1 +
 pycross/private/tools/wheel_installer.py | 20 ++++++++++++++++++++
 pycross/private/wheel_library.bzl        |  9 +++++++++
 4 files changed, 52 insertions(+)

diff --git a/MODULE.bazel b/MODULE.bazel
index fd1be168..e67ccbde 100644
--- a/MODULE.bazel
+++ b/MODULE.bazel
@@ -65,6 +65,28 @@ use_repo(lock_import, "lock_import_repos_hub")
 lock_repos = use_extension("@rules_pycross//pycross/extensions:lock_repos.bzl", "lock_repos")
 lock_repos.create()
 
+# TODO: patch-ng doesn't upload built wheels, only sdists, so we can't pull it
+# normally through our rules (would create a bootstrapping problem).
+# The library is a single file with no dependencies, we can just pull manually for now.
+# See https://github.com/conan-io/python-patch-ng/issues/51
+http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
+
+http_archive(
+    name = "patch-ng",
+    url = "https://github.com/conan-io/python-patch-ng/archive/refs/tags/1.19.0.tar.gz",
+    strip_prefix = "python-patch-ng-1.19.0",
+    build_file_content = """
+load("@rules_python//python:defs.bzl", "py_library")
+py_library(
+    name = "patch-ng",
+    srcs = [":patch_ng.py"],
+    imports = ["."],
+    visibility = ["//visibility:public"],
+)
+""",
+    integrity = "sha256-Gb4jkHC5YiT/XZXeW+PAEGEDYc3JKvhjRYj4yYaG7wg=",
+)
+
 # Currently development-only
 bazel_dep(name = "gazelle", version = "0.35.0", dev_dependency = True)
 bazel_dep(name = "stardoc", version = "0.6.2", dev_dependency = True)
diff --git a/pycross/private/tools/BUILD.bazel b/pycross/private/tools/BUILD.bazel
index c05a278d..106b6842 100644
--- a/pycross/private/tools/BUILD.bazel
+++ b/pycross/private/tools/BUILD.bazel
@@ -176,5 +176,6 @@ py_binary(
         ":args",
         ":installer",
         ":namespace_pkgs",
+        "@patch-ng",
     ],
 )
diff --git a/pycross/private/tools/wheel_installer.py b/pycross/private/tools/wheel_installer.py
index 39e11a58..13526ed8 100644
--- a/pycross/private/tools/wheel_installer.py
+++ b/pycross/private/tools/wheel_installer.py
@@ -5,6 +5,7 @@
 from __future__ import annotations
 
 import fnmatch
+import logging
 import os
 import shutil
 import tempfile
@@ -21,9 +22,16 @@
 from installer.sources import WheelContentElement
 from installer.sources import WheelFile
 
+import patch_ng
+
 from pycross.private.tools import namespace_pkgs
 from pycross.private.tools.args import FlagFileArgumentParser
 
+logging.basicConfig()
+
+logger = logging.getLogger("patch_ng")
+logger.setLevel(logging.WARNING)
+
 
 def setup_namespace_pkg_compatibility(wheel_dir: Path) -> None:
     """Converts native namespace packages to pkgutil-style packages
@@ -111,6 +119,11 @@ def main(args: Any) -> None:
                     "INSTALLER": b"https://github.com/jvolkman/rules_pycross",
                 },
             )
+            if args.patches:
+                for patch in args.patches.split(";"):
+                    patch_file = patch_ng.fromfile(patch)
+                    assert patch_file
+                    assert patch_file.apply(root=dest_dir)
     finally:
         shutil.rmtree(link_dir, ignore_errors=True)
 
@@ -154,6 +167,13 @@ def parse_flags() -> Any:
         help="The output path.",
     )
 
+    parser.add_argument(
+        "--patches",
+        type=str,
+        default="",
+        help="Semicolon-separated list of patch files",
+    )
+
     return parser.parse_args()
 
 
diff --git a/pycross/private/wheel_library.bzl b/pycross/private/wheel_library.bzl
index 2b19c72e..32d9278e 100644
--- a/pycross/private/wheel_library.bzl
+++ b/pycross/private/wheel_library.bzl
@@ -30,6 +30,11 @@ def _pycross_wheel_library_impl(ctx):
     for install_exclude_glob in ctx.attr.install_exclude_globs:
         args.add("--install-exclude-glob", install_exclude_glob)
 
+    patches = ";".join([patch.path for patch in ctx.files.patches])
+    if patches:
+        inputs.extend(ctx.files.patches)
+        args.add("--patches", patches)
+
     ctx.actions.run(
         inputs = inputs,
         outputs = [out],
@@ -115,6 +120,10 @@ and py_test targets must specify either `legacy_create_init=False` or the global
 This option is required to support some packages which cannot handle the conversion to pkg-util style.
             """,
         ),
+        "patches": attr.label_list(
+            doc = "Patches to apply after the wheel is installed",
+            allow_files = True,
+        ),
         "python_version": attr.string(
             doc = "The python version required for this wheel ('PY2' or 'PY3')",
             values = ["PY2", "PY3", ""],
