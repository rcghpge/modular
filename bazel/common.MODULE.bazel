"""Define bazel dependencies common to the internal and external repos."""

bazel_dep(name = "apple_support", version = "1.22.1", repo_name = "build_bazel_apple_support")
bazel_dep(name = "abseil-cpp", version = "20250127.1")
bazel_dep(name = "aspect_bazel_lib", version = "2.19.2")
bazel_dep(name = "aspect_rules_js", version = "2.4.1")
bazel_dep(name = "aspect_rules_py", version = "1.4.0")  # TODO: Upgrade when https://github.com/aspect-build/rules_py/issues/595 is fixed
bazel_dep(name = "bazel_skylib", version = "1.8.0")
bazel_dep(name = "grpc", version = "1.73.1", repo_name = "com_github_grpc_grpc")
bazel_dep(name = "grpc-java", version = "1.67.1")
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "protobuf", version = "31.1")
bazel_dep(name = "rules_cc", version = "0.0.17")
bazel_dep(name = "rules_mojo", version = "0.5.0")
bazel_dep(name = "rules_multirun", version = "0.12.0")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_proto", version = "7.0.2")
bazel_dep(name = "rules_pycross", version = "0.8.0")
bazel_dep(name = "rules_python", version = "1.5.1")
bazel_dep(name = "rules_shell", version = "0.4.1")
bazel_dep(name = "with_cfg.bzl", version = "0.10.3")

# TODO: Remove when transitives bump to this version or above
bazel_dep(name = "re2", version = "2024-07-02.bcr.1")
bazel_dep(name = "rules_apple", version = "3.22.0")
bazel_dep(name = "rules_nodejs", version = "6.4.0")
bazel_dep(name = "rules_swift", version = "2.8.2")
bazel_dep(name = "protoc-gen-validate", version = "1.2.1.bcr.1")

# Manually pull in https://github.com/bazel-contrib/rules_jvm_external/pull/1265
single_version_override(
    module_name = "rules_jvm_external",
    version = "6.7",
)

bazel_dep(name = "rules_mypy", version = "0.36.0", dev_dependency = True)

archive_override(
    module_name = "rules_pycross",
    integrity = "sha256-DnwyjQfpS9MRtk5Uh8UbPHvbXnbs38ciht55/pJRFZE=",
    patch_strip = 1,
    patches = [
        # https://github.com/jvolkman/rules_pycross/pull/176
        "//bazel/public-patches:rules_pycross_watch.patch",
    ],
    strip_prefix = "rules_pycross-b4707803848b06ae264247bcba15ddf3ef4008e2",
    urls = [
        "https://github.com/jvolkman/rules_pycross/archive/b4707803848b06ae264247bcba15ddf3ef4008e2.tar.gz",
    ],
)

single_version_override(
    module_name = "aspect_rules_py",
    patch_strip = 1,
    patches = [
        # https://github.com/aspect-build/rules_py/pull/463
        "//bazel/public-patches:rules_py_main.patch",
    ],
)

single_version_override(
    module_name = "with_cfg.bzl",
    patch_strip = 1,
    patches = [
        "//bazel/public-patches:with_cfg_visibility.patch",
    ],
)

single_version_override(
    module_name = "rules_mypy",
    patch_strip = 1,
    patches = [
        # https://github.com/theoremlp/rules_mypy/pull/105
        "//bazel/public-patches:rules_mypy_mojo_srcs.patch",
        # https://github.com/theoremlp/rules_mypy/pull/106
        "//bazel/public-patches:rules_mypy_pycross.patch",
        # https://github.com/theoremlp/rules_mypy/pull/104
        "//bazel/public-patches:rules_mypy_user_site.patch",
    ],
)

single_version_override(
    module_name = "grpc",
    patch_strip = 1,
    patches = [
        # Revert of https://github.com/grpc/grpc//commit/9a6bcd4c2f2913c1bfe8dccf9e536d8f53c360c2
        "//bazel/public-patches:grpc-no-macos-x86.patch",
    ],
    version = "1.73.1",
)

single_version_override(
    module_name = "grpc-java",
    patch_strip = 1,
    patches = [
        # TODO: Drop when this is pulled from bzlmod instead of grpc_deps.bzl
        "//bazel/public-patches:grpc-java.patch",
    ],
    version = "1.67.1",
)

DEFAULT_PYTHON_VERSION = "3.12"

PYTHON_VERSIONS = [
    "3_9",
    "3_10",
    "3_11",
    "3_12",
    "3_13",
]

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.defaults(python_version = DEFAULT_PYTHON_VERSION)

[
    python.toolchain(python_version = version.replace("_", "."))
    for version in PYTHON_VERSIONS
]

# Only the lowest version is used explicitly, everything else is indirect
use_repo(python, "python_3_9")

environments = use_extension("@rules_pycross//pycross/extensions:environments.bzl", "environments")
environments.create_for_python_toolchains(
    name = "rules_pycross_all_environments",
    platforms = [
        "x86_64-unknown-linux-gnu",
        "aarch64-unknown-linux-gnu",
        "aarch64-apple-darwin",
    ],
    python_versions = [x.replace("_", ".") for x in PYTHON_VERSIONS],
)
use_repo(environments, "rules_pycross_all_environments")

lock_file = use_extension("@rules_pycross//pycross/extensions:lock_file.bzl", "lock_file")
lock_file.instantiate(
    name = "modular_pip_lock_file_repo",
    lock_file = "//bazel/pip/requirements:pycross_lock_file.bzl",
)
use_repo(lock_file, "modular_pip_lock_file_repo")

module_versions = use_repo_rule("//bazel/pip:module_versions.bzl", "module_versions")

module_versions(
    name = "module_versions",
    default_python_version = DEFAULT_PYTHON_VERSION,
    python_versions = PYTHON_VERSIONS,
)

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

RUFF_VERSION = "0.11.13"

[
    http_archive(
        name = "ruff-{arch}".format(arch = arch),
        build_file_content = 'exports_files(["ruff"])',
        sha256 = sha,
        strip_prefix = "ruff-{arch}".format(arch = arch),
        url = "https://github.com/astral-sh/ruff/releases/download/{version}/ruff-{arch}.tar.gz".format(
            arch = arch,
            version = RUFF_VERSION,
        ),
    )
    for arch, sha in [
        ("x86_64-unknown-linux-gnu", "01aa32d29d00876b8d1429c617ed63a00b1fc81abfa4183bb05c9cb647fbc3d0"),
        ("aarch64-unknown-linux-gnu", "551af2ebc439d8268dcaf871ea60ad035f688728d30943dcbb2bf775e105213e"),
        ("aarch64-apple-darwin", "7d5e8feea7ee5c3962807996cad557e8a0c4d676c1cba6223bfb0e8b2ca07723"),
    ]
]

mojo = use_extension("@rules_mojo//mojo:extensions.bzl", "mojo")
mojo.gpu_toolchains(
    # nvidia-smi / amd-smi output -> GPU name, empty string to ignore GPU
    gpu_mapping = {
        " A10G": "a10",
        "A100-": "a100",
        " H100": "h100",
        " H200": "h200",
        " L4": "l4",
        " Ada ": "l4",
        " A3000 ": "a3000",
        "B100": "b100",
        "B200": "b200",
        " RTX 5090": "rtx5090",
        "Laptop GPU": "",
        "RTX 4070 Ti": "",
        "RTX 4080 SUPER": "",
        "RTX 4090": "rtx4090",
        "NVIDIA GeForce RTX 3090": "rtx3090",
        "MI300X": "mi300x",
        "MI325": "mi325",
        "MI355": "mi355",
        "Navi": "radeon",
        "AMD Radeon Graphics": "radeon",
        "Apple M1": "m1",
        "Apple M2": "m2",
        "Apple M3": "m3",
        "Apple M4": "m4",
    },
    # GPU name -> target accelerator
    supported_gpus = {
        "780M": "amdgpu:gfx1103",
        "a10": "nvidia:86",
        "a100": "nvidia:80",
        "a3000": "nvidia:86",
        "b100": "nvidia:100a",
        "b200": "nvidia:100a",
        "h100": "nvidia:90a",
        "h200": "nvidia:90a",
        "l4": "nvidia:89",
        "mi300x": "amdgpu:gfx942",
        "mi325": "amdgpu:gfx942",
        "mi355": "amdgpu:gfx950",
        "rtx3090": "nvidia:86",
        "rtx4090": "nvidia:89",
        "rtx5090": "nvidia:120a",
        "m1": "metal:10",
        "m2": "metal:20",
        "m3": "metal:30",
        "m4": "metal:40",
    },
)
use_repo(mojo, "mojo_gpu_toolchains", "mojo_host_platform")

http_archive(
    name = "uv_linux_aarch64",
    build_file_content = 'exports_files(["uv"])',
    sha256 = "4351c1e2ec13f5eb4da058ac1c39f00ae3042de9d6fdb6480e0170f32813210f",
    strip_prefix = "uv-aarch64-unknown-linux-musl",
    url = "https://github.com/astral-sh/uv/releases/download/0.7.15/uv-aarch64-unknown-linux-musl.tar.gz",
)

http_archive(
    name = "uv_linux_x86_64",
    build_file_content = 'exports_files(["uv"])',
    sha256 = "b1dc0892749e93382decbd894755be0ba1535587f0bb8333572b072d1b0f652a",
    strip_prefix = "uv-x86_64-unknown-linux-gnu",
    url = "https://github.com/astral-sh/uv/releases/download/0.7.15/uv-x86_64-unknown-linux-gnu.tar.gz",
)

http_archive(
    name = "uv_darwin_aarch64",
    build_file_content = 'exports_files(["uv"])',
    sha256 = "7a20f3d33cbbc75683d66e0562d4bdbd702ca656d7dc1b7be3c592de6a6517b9",
    strip_prefix = "uv-aarch64-apple-darwin",
    url = "https://github.com/astral-sh/uv/releases/download/0.7.15/uv-aarch64-apple-darwin.tar.gz",
)

bazel_dep(name = "sysroot-jammy-aarch64")
archive_override(
    module_name = "sysroot-jammy-aarch64",
    integrity = "sha256-v5qAjOEKEE/JknXfG/cmYOPcJY20dCjSqVqI0ZaAE5g=",
    urls = [
        "https://modular-bazel-artifacts-public.s3.amazonaws.com/artifacts/sysroot-jammy-aarch64/2/bf9a808ce10a104fc99275df1bf72660e3dc258db47428d2a95a88d196801398/sysroot-jammy-aarch64.tar.xz",
    ],
)

bazel_dep(name = "sysroot-jammy-x86_64")
archive_override(
    module_name = "sysroot-jammy-x86_64",
    integrity = "sha256-wqmIjd+G/q4gbakYTVLokn0TwCaw59kROGXgPcA47jA=",
    urls = [
        "https://modular-bazel-artifacts-public.s3.amazonaws.com/artifacts/sysroot-jammy-x86_64/2/c2a9888ddf86feae206da9184d52e8927d13c026b0e7d9113865e03dc038ee30/sysroot-jammy-x86_64.tar.xz",
    ],
)
